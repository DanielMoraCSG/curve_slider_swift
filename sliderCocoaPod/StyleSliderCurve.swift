//
//  StyleSliderCurve.swift
//  sliderCocoaPod
//
//  Created by Daniel Mora O on 19/11/16.
//  Copyright Â© 2016 CSGroup. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class StyleSliderCurve : NSObject {

    //// Drawing Methods

    public dynamic class func drawAmountSliderDonate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 274, height: 120), resizing: ResizingBehavior = .aspectFit, amount: CGFloat = 0, totalAmount: String = "0") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 274, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 274, y: resizedFrame.height / 120)


        //// Color Declarations
        let fillColor = UIColor(red: 0.980, green: 0.824, blue: 0.024, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.396, green: 0.388, blue: 0.399, alpha: 1.000)
        let textForeground = UIColor(red: 0.396, green: 0.388, blue: 0.399, alpha: 1.000)

        //// Image Declarations
        let image3 = UIImage(named: "image3.png")!
        let image4 = UIImage(named: "image4.png")!

        //// Variable Declarations
        let angle: CGFloat = 94 * amount
        let expression2: CGFloat = 94 * amount

        //// Group 2
        //// Group 3
        context.saveGState()
        context.setAlpha(0.57)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: -137.15, y: 51.36, width: 273, height: 80))
        var clipTransformation = CGAffineTransform.identity
        clipTransformation = clipTransformation.translatedBy(x: 138.15, y: -11.36)
        clipPath.apply(clipTransformation)
        clipPath.addClip()


        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: -0.04, y: 39)
        context.scaleBy(x: 0.81, y: 0.81)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 337.6, height: 101))
        context.saveGState()
        picturePath.addClip()
        image3.draw(in: CGRect(x: 0, y: 0, width: image3.size.width, height: image3.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture 2 Drawing
        context.saveGState()
        context.translateBy(x: 133.12, y: -51.29)
        context.rotate(by: -(expression2 - 75) * CGFloat.pi/180)
        context.scaleBy(x: 0.67, y: 0.67)

        let picture2Path = UIBezierPath(rect: CGRect(x: 100.27, y: 201.05, width: 30.4, height: 31.49))
        context.saveGState()
        picture2Path.addClip()
        image4.draw(in: CGRect(x: 100, y: 201, width: image4.size.width, height: image4.size.height))
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 255.29, y: 45.68))
        bezierPath.addCurve(to: CGPoint(x: 131.65, y: 93.68), controlPoint1: CGPoint(x: 226.24, y: 74.94), controlPoint2: CGPoint(x: 181.65, y: 93.68))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 45.68), controlPoint1: CGPoint(x: 81.64, y: 93.68), controlPoint2: CGPoint(x: 37.05, y: 74.94))
        strokeColor2.setStroke()
        bezierPath.lineWidth = 2.11
        bezierPath.stroke()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 132.17, y: -70.11)
        context.rotate(by: -(angle - 74) * CGFloat.pi/180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 67.83, y: 138.11, width: 18, height: 18))
        fillColor.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Label Drawing
        let labelRect = CGRect(x: 239.1, y: 19, width: 6.96, height: 20)
        let labelTextContent = "$"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 12)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 246.06, y: 13, width: 27.84, height: 27)
        let label2TextContent = "100"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 16)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 0.38, y: 20, width: 6.96, height: 20)
        let label3TextContent = "$"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 12)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label3Style]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Label 4 Drawing
        let label4Rect = CGRect(x: 7.34, y: 14, width: 9.28, height: 27)
        let label4TextContent = "1"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .center
        let label4FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 16)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label4Style]

        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()


        //// Label 5 Drawing
        let label5Rect = CGRect(x: 82, y: 33, width: 135, height: 45)
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .center
        let label5FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-UltraLight", size: 43.57)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label5Style]

        let label5TextHeight: CGFloat = totalAmount.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        totalAmount.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        //// Label 6 Drawing
        let label6Rect = CGRect(x: 102.26, y: 53, width: 9.48, height: 27)
        let label6TextContent = "$"
        let label6Style = NSMutableParagraphStyle()
        label6Style.alignment = .center
        let label6FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 16.34)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label6Style]

        let label6TextHeight: CGFloat = label6TextContent.boundingRect(with: CGSize(width: label6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label6Rect)
        label6TextContent.draw(in: CGRect(x: label6Rect.minX, y: label6Rect.minY + (label6Rect.height - label6TextHeight) / 2, width: label6Rect.width, height: label6TextHeight), withAttributes: label6FontAttributes)
        context.restoreGState()


        //// Label 7 Drawing
        let label7Rect = CGRect(x: 94, y: 13, width: 95, height: 28)
        let label7TextContent = "Amount"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .center
        let label7FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 16.34)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label7Style]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawHomeTimeSlider(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 272, height: 120), resizing: ResizingBehavior = .aspectFit, time: CGFloat = 0, totalTime: String = "65") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 272, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 272, y: resizedFrame.height / 120)


        //// Color Declarations
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor = UIColor(red: 0.980, green: 0.824, blue: 0.024, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.996, green: 0.996, blue: 0.996, alpha: 1.000)
        let textForeground3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground4 = UIColor(red: 0.980, green: 0.824, blue: 0.024, alpha: 1.000)

        //// Image Declarations
        let image5 = UIImage(named: "image5.png")!
        let image6 = UIImage(named: "image6.png")!

        //// Variable Declarations
        let angle2: CGFloat = 90 * time
        let shadow2: CGFloat = 98 * time

        //// Group 2
        //// Group 3
        context.saveGState()
        context.setAlpha(0.57)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: 3, y: 38, width: 263, height: 82))
        clipPath.addClip()


        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 3, y: 38)
        context.scaleBy(x: 0.81, y: 0.81)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 324, height: 101))
        context.saveGState()
        picturePath.addClip()
        image5.draw(in: CGRect(x: 0, y: 0, width: image5.size.width, height: image5.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture 2 Drawing
        context.saveGState()
        context.translateBy(x: 134.56, y: -33.94)
        context.rotate(by: -(shadow2 - 42) * CGFloat.pi/180)
        context.scaleBy(x: 0.67, y: 0.67)

        let picture2Path = UIBezierPath(rect: CGRect(x: -42.4, y: 203.78, width: 30, height: 30))
        context.saveGState()
        picture2Path.addClip()
        image6.draw(in: CGRect(x: -42, y: 204, width: image6.size.width, height: image6.size.height))
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 258.29, y: 45.68))
        bezierPath.addCurve(to: CGPoint(x: 134.65, y: 93.68), controlPoint1: CGPoint(x: 229.24, y: 74.94), controlPoint2: CGPoint(x: 184.65, y: 93.68))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 45.68), controlPoint1: CGPoint(x: 84.64, y: 93.68), controlPoint2: CGPoint(x: 40.05, y: 74.94))
        strokeColor.setStroke()
        bezierPath.lineWidth = 2.11
        bezierPath.stroke()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 135, y: -79.9)
        context.rotate(by: -(angle2 - 39) * CGFloat.pi/180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -26, y: 163.9, width: 18, height: 18))
        fillColor.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Label Drawing
        let labelRect = CGRect(x: 244.58, y: 3, width: 27.84, height: 27)
        let labelTextContent = "100"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 16)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 248.22, y: 19, width: 20.57, height: 20)
        let label2TextContent = "min"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 12)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 5.86, y: 3, width: 9.28, height: 27)
        let label3TextContent = "1"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 16)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label3Style]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Label 4 Drawing
        let label4Rect = CGRect(x: 0.22, y: 19, width: 20.57, height: 20)
        let label4TextContent = "min"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .center
        let label4FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 12)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label4Style]

        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()


        //// Label 5 Drawing
        let label5Rect = CGRect(x: 70, y: 14, width: 74.9, height: 73)
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .right
        let label5FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-UltraLight", size: 43.57)!, NSForegroundColorAttributeName: textForeground3, NSParagraphStyleAttributeName: label5Style]

        let label5TextHeight: CGFloat = totalTime.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        totalTime.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        //// Label 6 Drawing
        let label6Rect = CGRect(x: 145.35, y: 27.09, width: 34.65, height: 27)
        let label6TextContent = "min"
        let label6Style = NSMutableParagraphStyle()
        label6Style.alignment = .center
        let label6FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 16.34)!, NSForegroundColorAttributeName: textForeground3, NSParagraphStyleAttributeName: label6Style]

        let label6TextHeight: CGFloat = label6TextContent.boundingRect(with: CGSize(width: label6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label6Rect)
        label6TextContent.draw(in: CGRect(x: label6Rect.minX, y: label6Rect.minY + (label6Rect.height - label6TextHeight) / 2, width: label6Rect.width, height: label6TextHeight), withAttributes: label6FontAttributes)
        context.restoreGState()


        //// Label 7 Drawing
        let label7Rect = CGRect(x: 104, y: 5, width: 56, height: 27)
        let label7TextContent = "Time"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .center
        let label7FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 16.34)!, NSForegroundColorAttributeName: textForeground4, NSParagraphStyleAttributeName: label7Style]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawHomeMoneySlider(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 272, height: 120), resizing: ResizingBehavior = .aspectFit, amount2: CGFloat = 0, totalAmount2: String = "90") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 272, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 272, y: resizedFrame.height / 120)


        //// Color Declarations
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor = UIColor(red: 0.980, green: 0.824, blue: 0.024, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.996, green: 0.996, blue: 0.996, alpha: 1.000)
        let textForeground3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground4 = UIColor(red: 0.980, green: 0.824, blue: 0.024, alpha: 1.000)

        //// Image Declarations
        let image5 = UIImage(named: "image5.png")!
        let image6 = UIImage(named: "image6.png")!

        //// Variable Declarations
        let angle3: CGFloat = 90 * amount2
        let shadow3: CGFloat = 90 * amount2

        //// Group 2
        //// Group 3
        context.saveGState()
        context.setAlpha(0.57)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: 5, y: 38, width: 263, height: 82))
        clipPath.addClip()


        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 5, y: 38)
        context.scaleBy(x: 0.81, y: 0.81)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 324, height: 101))
        context.saveGState()
        picturePath.addClip()
        image5.draw(in: CGRect(x: 0, y: 0, width: image5.size.width, height: image5.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Picture 2 Drawing
        context.saveGState()
        context.translateBy(x: 136.87, y: -49.66)
        context.rotate(by: -(shadow3 - 40) * CGFloat.pi/180)
        context.scaleBy(x: 0.67, y: 0.67)

        let picture2Path = UIBezierPath(rect: CGRect(x: -40.3, y: 225.99, width: 30, height: 30))
        context.saveGState()
        picture2Path.addClip()
        image6.draw(in: CGRect(x: -40, y: 226, width: image6.size.width, height: image6.size.height))
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 260.29, y: 45.68))
        bezierPath.addCurve(to: CGPoint(x: 136.65, y: 93.68), controlPoint1: CGPoint(x: 231.24, y: 74.94), controlPoint2: CGPoint(x: 186.65, y: 93.68))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 45.68), controlPoint1: CGPoint(x: 86.64, y: 93.68), controlPoint2: CGPoint(x: 42.05, y: 74.94))
        strokeColor.setStroke()
        bezierPath.lineWidth = 2.11
        bezierPath.stroke()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 136.42, y: -77.22)
        context.rotate(by: -(angle3 - 40) * CGFloat.pi/180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -25.42, y: 161.22, width: 18, height: 18))
        fillColor.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Label Drawing
        let labelRect = CGRect(x: 239.37, y: 8.49, width: 6.45, height: 19)
        let labelTextContent = "$"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 11.12)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 245.82, y: 3.49, width: 25.81, height: 25)
        let label2TextContent = "100"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 14.83)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: -0.03, y: 9.42, width: 6.45, height: 19)
        let label3TextContent = "$"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 11.12)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label3Style]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Label 4 Drawing
        let label4Rect = CGRect(x: 6.42, y: 4.42, width: 8.6, height: 25)
        let label4TextContent = "1"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .center
        let label4FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 14.83)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label4Style]

        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()


        //// Label 5 Drawing
        let label5Rect = CGRect(x: 112.88, y: 17.05, width: 74.12, height: 58.95)
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-UltraLight", size: 40.39)!, NSForegroundColorAttributeName: textForeground3, NSParagraphStyleAttributeName: label5Style]

        let label5TextHeight: CGFloat = totalAmount2.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        totalAmount2.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        //// Label 6 Drawing
        let label6Rect = CGRect(x: 101.61, y: 39.01, width: 8.79, height: 26)
        let label6TextContent = "$"
        let label6Style = NSMutableParagraphStyle()
        label6Style.alignment = .center
        let label6FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Regular", size: 15.15)!, NSForegroundColorAttributeName: textForeground3, NSParagraphStyleAttributeName: label6Style]

        let label6TextHeight: CGFloat = label6TextContent.boundingRect(with: CGSize(width: label6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label6Rect)
        label6TextContent.draw(in: CGRect(x: label6Rect.minX, y: label6Rect.minY + (label6Rect.height - label6TextHeight) / 2, width: label6Rect.width, height: label6TextHeight), withAttributes: label6FontAttributes)
        context.restoreGState()


        //// Label 7 Drawing
        let label7Rect = CGRect(x: 103.9, y: 2, width: 69.1, height: 26)
        let label7TextContent = "Amount"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .center
        let label7FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 15.15)!, NSForegroundColorAttributeName: textForeground4, NSParagraphStyleAttributeName: label7Style]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
